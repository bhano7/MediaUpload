import UIKit
import MobileCoreServices

UIImagePickerControllerDelegate, UINavigationControllerDelegate

var isImageOrVideoSelected = false
    var imagePicker = UIImagePickerController()
    var isImage = false
    var isVideo = false
    var selectedImage = UIImage()
    var selectedVideo: URL?
    
    
        // MARK: - ImagePickerController
    func openCamera()
    {
        if(UIImagePickerController .isSourceTypeAvailable(UIImagePickerControllerSourceType.camera))
        {
            imagePicker.sourceType = UIImagePickerControllerSourceType.camera
            
           
            imagePicker.allowsEditing = false
            imagePicker.mediaTypes = [kUTTypeMovie as String, kUTTypeImage as String]
            imagePicker.videoMaximumDuration = 60.0
            imagePicker.videoQuality = .typeMedium
            self.present(imagePicker, animated: true, completion: nil)
        }
        else
        {
            let alert  = UIAlertController(title: "Warning", message: "You don't have camera", preferredStyle: .alert)
            alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
            self.present(alert, animated: true, completion: nil)
        }
    }
    
    func openGallary()
    {
        imagePicker.sourceType = UIImagePickerControllerSourceType.photoLibrary
        imagePicker.allowsEditing = true
        imagePicker.mediaTypes = ["public.image", "public.movie"]
        self.present(imagePicker, animated: true, completion: nil)
    }
    
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String: Any]) {
        
        if let image = info[UIImagePickerControllerEditedImage] as? UIImage {
            
            isImage = true
            self.btnCamera.setImage(image, for: UIControlState.normal)
            selectedImage = image
            isImageOrVideoSelected = true
            
            self.startUploadImageVideo()
            
        }
        else if let image = info[UIImagePickerControllerOriginalImage] as? UIImage {
            isImage = true
            self.btnCamera.setImage(image, for: UIControlState.normal)
            selectedImage = image
            isImageOrVideoSelected = true
            self.startUploadImageVideo()
            
        }
        
        if let videoURL = info[UIImagePickerControllerMediaURL]as? URL{
            print(videoURL)
            do {
                isVideo = true
                let asset = AVURLAsset(url: videoURL, options: nil)
                let imgGenerator = AVAssetImageGenerator(asset: asset)
                imgGenerator.appliesPreferredTrackTransform = true
                let cgImage = try imgGenerator.copyCGImage(at: CMTimeMake(0, 1), actualTime: nil)
                let thumbnail = UIImage(cgImage: cgImage)
                self.btnCamera.setImage(thumbnail, for: UIControlState.normal)
                selectedVideo = videoURL as URL
                self.startUploadImageVideo()
            } catch let error {
                print("*** Error generating thumbnail: \(error.localizedDescription)")
            }
        }
        picker.dismiss(animated: true, completion: nil)
        
    }
    
    
        // MARK: - API call
    
    func startUploadImageVideo() {
        
        self.showProgressSuccess(false, withTitle: "Uploading Image")
        
        if isImage == true {
            
            
            isImage = false
            
            let token = randomString(length: 10)
            K_TOKEN_IMG = token
            let param = ["token": token]
            APIClient.sharedInstance.postImageToServer(PHOTO_SAVE_FILE, image: selectedImage, parameters: param) { (response, error, statusCode) in
                //                print(response?.description)
                if error == nil {
                    if statusCode == 200
                    {
                        print("upload")
                        self.isMediaUploaded = true
                        self.showProgressSuccess(true, withTitle: "Image uploaded Successfully.")
                    }else
                    {
                        print("not upload")
                        print("STATUS CODE \(String(describing: statusCode))")
                        self.hideHUD()
                        
                        if let msg = response!["msg"] as? String
                        {
                            AppUtilites.showAlert(title: "Error", message: msg, cancelButtonTitle: "OK")
                        }
                        
                    }
                }
                else{
                    print("not upload")
                    self.hideHUD()
                    
                }
            }
            
        }
        else if isVideo == true {
            isVideo = false
            
            let token = randomString(length: 10)
            K_TOKEN_IMG = token
            let param = ["token": token]
            
            
            APIClient.sharedInstance.postVideoToServer(PHOTO_SAVE_FILE, videoURL: selectedVideo, parameters: param){ (response, error, statusCode) in
                //                print(response?.description)
                if error == nil {
                    
                    if statusCode == 200
                    {
                        print("upload")
                        self.isMediaUploaded = true
                        self.showProgressSuccess(true, withTitle: "Image uploaded Successfully.")
                    }else
                    {
                        print("not upload")
                        print("STATUS CODE \(String(describing: statusCode))")
                        self.hideHUD()
                        
                        if let msg = response!["msg"] as? String
                        {
                            AppUtilites.showAlert(title: "Error", message: msg, cancelButtonTitle: "OK")
                        }
                        
                    }
                    
                }
                else{
                    print("not upload video")
                    
                }
            }
        }
        
        
    }
